.container1 {
    background-color: antiquewhite;
    display: flex;
    /* display:flex; ve justify-content ile ayni div 
    icerisinde olanlari yatayda dikeyde ortada hizayalabiliriz.*/
    justify-content: center;
    /* center; orta
    end; sag
    start;sol
    space-between; sag-sol yasli ama aralarinda mesafe birakiyor.
    */
    flex-wrap: wrap;
    /* yan yana sigamadiklari zaman (ekran kenarlardan daraltildiginda) sirayla asagiya dogru düsüyorlar.*/

}


/*! Display:flex; Elemanların diziliş yönü : column=altalta block gibi, row =yanyana inline gibi, row-reverse= satırı sondan ve tersten yaz, column-reverse*/
/* flex-direction: row; */

/* nowrap=sıkıştırma veya wrap=alt satıra geçebilme:flex-wrap: wrap, nowrap, wrap-reverse */
/* flex-wrap: wrap; */

/*! Yatay Hizalama: Justify-center
/**  /** flex-start: Nesneler kapsayıcının başından başlayarak dizilirler.*/
/**space-around: Nesneler arasında eşit boşluklar bırakılır.
/**space-between: İlk nesne başta, son nesne sonda olacak şekilde nesneler eşit olarak kapsayıcının içerisinde dizilirler.
/**center: Nesneler tam ortalı olacak şekilde hizalanır.
/**flex-end: Son nesne en sağa yaslanacak şekilde hizalanır. */
/* justify-content:space-around; */



.container1 div {

    background-color: tomato;
    width: 5rem;
    height: 5rem;
    margin: 1rem;
}







.container2 {
    background-color: pink;
    height: 20rem;
    display: flex;
    justify-content: flex-end;
    /* child ların içindeki yazıları hizayı bozana göre (padding alana göre) hizala */
    align-items: baseline;
    /* align-items:center; */
}

.container2 div {

    background-color: cornflowerblue;
    width: 5rem;
    margin: 1rem;
    height: 10rem;

    /* sayılar kıpırdasın */
    display: flex;
    justify-content: center;

}


.container2 div:nth-child(1) {
    height: 5rem;

}

.container2 div:nth-child(2) {
    height: 7rem;
    padding-top: 2rem;
}

.container2 div:nth-child(3) {
    height: 2rem;
    padding: 0.5rem;
}

white_check_mark eyes raised_hands
/*! Dikey Hizalama => align-items
/**flex-start: Nesneler, kapsayıcının en üstünden başlayarak dizilirler.
/**flex-end: Nesneler, kapsayıcının en altından başlayarak, yukarı doğru dizilirler.
/**center: Nesneler ortalı bir şekilde dikey olarak sıralanırlar.
/**baseline: İlk satırdaki yazı tipi göz önüne alınarak hizalanmaya başlanılır.
/**stretch: Tüm nesneler kapsayıcı yüksekliğine eşit olacak şekilde dizilirler.


/** bir child element stretch ile container'ın sınırlarına dayandığında child'in içerisindeki içeriği (Örn yazı) yine dikey olarak ortaya hizalamak için nested flex yapısı kullanılabilir*/

ul {
    background-color: darkgray;
    list-style-type: none;
    height: 30rem;
    display: flex;
    flex-wrap: wrap;
    justify-content: space-around;
    align-content: start;
    /*!Çok satırlı verilerin dikeyde hizalanması için kullanılır.bütün elemanlar yukarı çıkıyorlar*/
    gap: 6rem 2rem;
    /*6 altindakilere olan uzaklik, 2 aralarinda ki uzaklik */



}

ul li {
    background-color: violet;
    width: 4rem;
    height: 4rem;

    display: flex;
    justify-content: center;
    align-items: center;

}

.container4 {
    background-color: red;
    display: flex;

}

.container4 div {
    background-color:yellow;
    width: 5rem;
    margin: 1rem;
    flex-grow: 1;
    /* Cocuklara büyüme izni ver.*/
}


div.grow2{
    flex-grow: 2;
    /* Diger cocuklardan 2 kat daha fazla büyüsün */
}

div.grow3{
    flex-grow: 3;
    /* Diger cocuklardan 3 kat daha fazla büyüsün */
}


div.grow4{
    flex-grow: 0;
    /* bu cocugun büyümesi 0 */
}